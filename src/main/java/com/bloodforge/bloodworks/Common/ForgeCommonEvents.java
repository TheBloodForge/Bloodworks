package com.bloodforge.bloodworks.Common;

import com.bloodforge.bloodworks.Blocks.BlockEntities.BE_BloodDrain;
import com.bloodforge.bloodworks.Globals;
import com.bloodforge.bloodworks.Registry.BlockRegistry;
import com.bloodforge.bloodworks.Registry.DataGen.BloodworksLangProvidor;
import com.bloodforge.bloodworks.Registry.ItemProvidor;
import com.bloodforge.bloodworks.Server.TankDataProxy;
import net.minecraft.core.BlockPos;
import net.minecraft.data.DataGenerator;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraftforge.common.data.ExistingFileHelper;
import net.minecraftforge.data.event.GatherDataEvent;
import net.minecraftforge.event.entity.living.LivingDamageEvent;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;

public class ForgeCommonEvents
{

    @SubscribeEvent
    public static void gatherData(GatherDataEvent event) {
        DataGenerator gen = event.getGenerator();
        ExistingFileHelper existingFileHelper = event.getExistingFileHelper();
        System.out.println("ON GATHER DATA EVENT");
        event.getGenerator().addProvider(true, new ItemProvidor(event.getGenerator(), Globals.MODID, event.getExistingFileHelper()));

        event.getGenerator().addProvider(true, new BloodworksLangProvidor(event.getGenerator()));
        System.out.println("FIN ON GATHER DATA EVENT");
        //Client side data generators
//        gen.addProvider(event.includeClient(), new LangProvider(gen));
//        gen.addProvider(event.includeClient(), new TextureProvider(gen, existingFileHelper));
//        gen.addProvider(event.includeClient(), new SoundProvider(gen, existingFileHelper));
        //Let the blockstate provider see models generated by the item model provider
//        ItemModelProvider itemModelProvider = new ItemModelProvider(gen, existingFileHelper);
//        gen.addProvider(event.includeClient(), itemModelProvider);
//        gen.addProvider(event.includeClient(), new BlockStateProvider(gen, itemModelProvider.existingFileHelper));


        //Server side data generators
//        gen.addProvider(event.includeServer(), new TagProvider(gen, existingFileHelper));
//        gen.addProvider(event.includeServer(), new LootProvider(gen));
//        gen.addProvider(event.includeServer(), new BiomeModifierProvider(gen));
//        gen.addProvider(event.includeServer(), new RecipeProvider(gen, existingFileHelper));
//        gen.addProvider(event.includeServer(), new AdvancementProvider(gen, existingFileHelper));
    }

    @SubscribeEvent
    public void onPlayerJoin(PlayerEvent.PlayerLoggedInEvent event)
    {
        if (!event.getEntity().level.isClientSide)
            TankDataProxy.syncTankDataWithPlayer((ServerPlayer) event.getEntity());
    }

    @SubscribeEvent
    public void onLivingHurt(LivingDamageEvent event)
    {
        if(event.getEntity().level.isClientSide) return;
        for(int i = 0; i < 2; i++)
        {
            BlockPos cPos = event.getEntity().blockPosition().below(i);
            if(event.getEntity().level.getBlockState(cPos).is(BlockRegistry.BLOCK_BLOOD_DRAIN.block().get()))
            {
                BlockEntity be = event.getEntity().level.getBlockEntity(cPos);
                if(be instanceof BE_BloodDrain drain)
                {
                    drain.collectEntityBlood(event.getEntity(), event.getAmount());
                }
            }
        }
    }
}